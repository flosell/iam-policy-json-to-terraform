name: main pipeline

on:
  push:
    branches: [master, ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
env:
  TERM: xterm
jobs:
  check:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: asdf-vm/actions/install@v4
      - run: ./go check
  test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: asdf-vm/actions/install@v4
      - name: Run tests
        run: ./go test
  cli-build:
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - uses: actions/checkout@v5
      - uses: asdf-vm/actions/install@v4
      - name: Build CLI
        run: ./go cli_build
  cli-test-arm64:
    runs-on: ubuntu-24.04
    needs: cli-build
    steps:
      - uses: actions/checkout@v5
      - uses: asdf-vm/actions/install@v4
      - name: Install QEMU
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y qemu-user-static
      - name: Build ARM64 binary
        run: ./go iam_policy_json_to_terraform_arm64
      - name: Test ARM64 binary with QEMU
        run: |
          echo '{"Statement":[{"Effect":"Allow","Action":["ec2:Describe*"],"Resource":"*"}]}' | qemu-aarch64-static ./iam-policy-json-to-terraform_arm64
          qemu-aarch64-static ./iam-policy-json-to-terraform_arm64 -version
  web-build:
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - uses: actions/checkout@v5
      - uses: asdf-vm/actions/install@v4
      - name: Install tools
        run: |
          ./go tools_web
      - name: Build web version
        run: ./go web_build
      - name: Store website build
        uses: actions/upload-artifact@v4
        with:
          name: website
          path: |
            web/index.html
            web/app.css
            web/app.js
            web/wasm.wasm
            web/wasm_exec.js
            web/img/GitHub-Mark-Light-32px.png
  web-test:
    runs-on: ubuntu-24.04
    needs: web-build
    steps:
      - uses: actions/checkout@v5
      - name: Retrieve website build from previous step
        uses: actions/download-artifact@v5
        with:
          name: website
          path: web
      - uses: asdf-vm/actions/install@v4
      - name: Install tools
        run: |
          ./go tools_web
      - name: Run E2E tests
        run: ./go web_e2e
      - name: Run visual regression tests
        run: ./go web_visual_regression_test
      - name: Store Visual Regression test report
        if: ${{failure()}}
        uses: actions/upload-artifact@v4
        with:
          name: visual regression test report
          path: |
            web/backstop_data/*
  web-deploy:
    runs-on: ubuntu-24.04
    needs: web-test
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v5
      - name: Retrieve website build from previous step
        uses: actions/download-artifact@v5
        with:
          name: website
          path: web
      - name: Set GitHub Actions Bot as GitHub user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Deploy to GitHub Pages
        run: ./go web_deploy
      - name: Store website build
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: |
            docs/version.txt
  web-test-after-deployment:
    runs-on: ubuntu-24.04
    needs: web-deploy
    steps:
      - uses: actions/checkout@v5
      - uses: asdf-vm/actions/install@v4
      - name: Retrieve website build from previous step
        uses: actions/download-artifact@v5
        with:
          name: version
          path: docs
      - name: Install tools
        run: |
          ./go tools_web
      - name: Wait for version deployed
        run: ./go wait_for_deployed
        timeout-minutes: 5
      - name: Run E2E tests
        run: ./go web_e2e_deployed
  test-readme:
    runs-on: ubuntu-24.04
    needs: cli-build
    steps:
      - uses: actions/checkout@v5
      - name: Test if readme is written well
        run: ./go test_readme
